//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""MovingActions"",
            ""id"": ""d72361e7-53d0-491c-9b53-6274c619fd33"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""313aca11-b3b8-426e-aa26-3f967326ba03"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c2bcdb25-cc4c-48f6-91f1-59b0def56aa3"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""097672ce-76c3-4f53-8843-2f2a8a2d9a93"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc65ba17-5f68-49c9-81d1-b1a7f48b6859"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""529b087e-5555-4a98-a945-780ddaf4acb1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3af4c45-4482-46f4-a3f4-3f3d52e186b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ShootingActions"",
            ""id"": ""ca50a692-1c28-4fdc-aeff-706273a9f291"",
            ""actions"": [
                {
                    ""name"": ""PrimaryShoot"",
                    ""type"": ""Button"",
                    ""id"": ""49c496f9-73f3-4aab-b629-029359b6d3c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryShoot"",
                    ""type"": ""Button"",
                    ""id"": ""d47f1569-f2cf-499e-bdeb-1d1af8595d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""054fe4d4-ba10-45cd-80ae-5dbc9a27ca32"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f139649b-9e0a-44c2-b461-153d8d0b07f0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovingActions
        m_MovingActions = asset.FindActionMap("MovingActions", throwIfNotFound: true);
        m_MovingActions_Movement = m_MovingActions.FindAction("Movement", throwIfNotFound: true);
        // ShootingActions
        m_ShootingActions = asset.FindActionMap("ShootingActions", throwIfNotFound: true);
        m_ShootingActions_PrimaryShoot = m_ShootingActions.FindAction("PrimaryShoot", throwIfNotFound: true);
        m_ShootingActions_SecondaryShoot = m_ShootingActions.FindAction("SecondaryShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovingActions
    private readonly InputActionMap m_MovingActions;
    private List<IMovingActionsActions> m_MovingActionsActionsCallbackInterfaces = new List<IMovingActionsActions>();
    private readonly InputAction m_MovingActions_Movement;
    public struct MovingActionsActions
    {
        private @PlayerActions m_Wrapper;
        public MovingActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovingActions_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MovingActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovingActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMovingActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MovingActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovingActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovingActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovingActionsActions instance)
        {
            if (m_Wrapper.m_MovingActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovingActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MovingActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovingActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovingActionsActions @MovingActions => new MovingActionsActions(this);

    // ShootingActions
    private readonly InputActionMap m_ShootingActions;
    private List<IShootingActionsActions> m_ShootingActionsActionsCallbackInterfaces = new List<IShootingActionsActions>();
    private readonly InputAction m_ShootingActions_PrimaryShoot;
    private readonly InputAction m_ShootingActions_SecondaryShoot;
    public struct ShootingActionsActions
    {
        private @PlayerActions m_Wrapper;
        public ShootingActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryShoot => m_Wrapper.m_ShootingActions_PrimaryShoot;
        public InputAction @SecondaryShoot => m_Wrapper.m_ShootingActions_SecondaryShoot;
        public InputActionMap Get() { return m_Wrapper.m_ShootingActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActionsActions set) { return set.Get(); }
        public void AddCallbacks(IShootingActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootingActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootingActionsActionsCallbackInterfaces.Add(instance);
            @PrimaryShoot.started += instance.OnPrimaryShoot;
            @PrimaryShoot.performed += instance.OnPrimaryShoot;
            @PrimaryShoot.canceled += instance.OnPrimaryShoot;
            @SecondaryShoot.started += instance.OnSecondaryShoot;
            @SecondaryShoot.performed += instance.OnSecondaryShoot;
            @SecondaryShoot.canceled += instance.OnSecondaryShoot;
        }

        private void UnregisterCallbacks(IShootingActionsActions instance)
        {
            @PrimaryShoot.started -= instance.OnPrimaryShoot;
            @PrimaryShoot.performed -= instance.OnPrimaryShoot;
            @PrimaryShoot.canceled -= instance.OnPrimaryShoot;
            @SecondaryShoot.started -= instance.OnSecondaryShoot;
            @SecondaryShoot.performed -= instance.OnSecondaryShoot;
            @SecondaryShoot.canceled -= instance.OnSecondaryShoot;
        }

        public void RemoveCallbacks(IShootingActionsActions instance)
        {
            if (m_Wrapper.m_ShootingActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootingActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootingActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootingActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootingActionsActions @ShootingActions => new ShootingActionsActions(this);
    public interface IMovingActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IShootingActionsActions
    {
        void OnPrimaryShoot(InputAction.CallbackContext context);
        void OnSecondaryShoot(InputAction.CallbackContext context);
    }
}
